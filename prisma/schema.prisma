// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   
  accounts      Account[]
  sessions      Session[]
  favorites     UserFavorite[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  visits OpeningVisit[]
}

model Opening {
  id        String   @id @default(cuid())
  fen       String   @unique
  src       String
  eco       String
  moves     String
  name      String
  scid      String?
  isEcoRoot Boolean? @default(false)
  
  // Relaciones
  aliases    Alias[]
  fromTransitions FromTo[] @relation("FromOpening")
  toTransitions   FromTo[] @relation("ToOpening")
  UserFavorite UserFavorite[]
  visits OpeningVisit[]

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eco])
  @@index([src])
  @@index([fen])
}

model Alias {
  id         String   @id @default(cuid())
  source     String   // ej: "scid", "eco_wikip", "ct", etc.
  value      String
  openingId  String
  opening    Opening  @relation(fields: [openingId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([openingId, source, value])
}

model FromTo {
  id        String   @id @default(cuid())
  fromFen   String
  toFen     String
  fromSrc   String
  toSrc     String
  
  // Relaciones opcionales a Opening
  fromOpening Opening? @relation("FromOpening", fields: [fromFen], references: [fen])
  toOpening   Opening? @relation("ToOpening", fields: [toFen], references: [fen])
  
  createdAt DateTime @default(now())

  @@index([fromFen])
  @@index([toFen])
}

model UserFavorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  opening   Opening  @relation(fields: [openingId], references: [id])
  openingId String
  createdAt DateTime @default(now())

  @@unique([userId, openingId])
}

model OpeningVisit {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  opening   Opening  @relation(fields: [openingId], references: [id], onDelete: Cascade)
  openingId String
  visitedAt DateTime @default(now())
  count     Int      @default(1) // Para contar visitas repetidas

  @@unique([userId, openingId])
  @@index([userId])
  @@index([openingId])
  @@index([visitedAt])
}